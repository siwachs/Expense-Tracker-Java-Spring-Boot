/*
 * Gradle Build File for a Spring Boot Application (Java 21)
 *
 * Includes:
 * - Spring Boot Web for REST APIs
 * - Spring Boot Actuator for health/metrics
 * - Spring Cloud Bootstrap for early external config loading
 * - Spring Data JPA for database interaction
 * - Spring Security + OAuth2 Resource Server for API protection
 * - Lombok for reducing boilerplate
 * - ModelMapper for DTO <-> Entity conversion
 * - JJWT for JWT creation, signing, and parsing
 */

plugins {
    id 'application'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        // Ensures compatibility with Spring Cloud
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.1"
    }
}

dependencies {
    // Spring Boot core and web framework
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Monitoring & health endpoints
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Early loading of remote configurations
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

    // DB connection Driver
    implementation 'mysql:mysql-connector-java:8.0.33'

    // Relational database access with JPA and Spring Data
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // API security and JWT token validation (OAuth2)
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    // Lombok - Auto-generates boilerplate (getters, setters, constructors)
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // ModelMapper - For mapping between DTOs and entities
    implementation 'org.modelmapper:modelmapper:3.2.0'

    // JJWT - Java JWT library for token generation, signing, and validation
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'       // JWT API (interfaces)
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'          // Default implementation
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'       // Jackson-based JSON parser

    // Optional utilities like caching, collections (Guava)
    implementation 'com.google.guava:guava:33.0.0-jre'

    // Testing support
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'org.AuthService.App'
}